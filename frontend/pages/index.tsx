import Head from 'next/head'
import { useAccount, useConnect, useDisconnect, useContractRead, useBalance, useBlockNumber, useNetwork } from 'wagmi'
import { InjectedConnector } from 'wagmi/connectors/injected'
import NewUpdate from '../components/Post'
import { Button } from '../components/UI/Button'
import { Header } from '../components/Header'
import { Input } from '../components/UI/Input'
import React, { useState, useEffect } from 'react';
import { LENS_POST_DELEGATION } from '../contracts/contracts'
import { LensPostDelegation } from '../abis/LensPostDelegation'
import { useReferenceModuleStore } from 'store/referencemodule'
import { ReferenceModules } from 'generated/types'
import { useProfileIdStore } from 'store/profileid'
export default function Home() {
  const setSelectedReferenceModule = useReferenceModuleStore((state) => state.setSelectedReferenceModule);
  const setProfileId = useProfileIdStore((state) => state.setProfileId);
  const { address, isConnected } = useAccount()
  const { connect } = useConnect({
    connector: new InjectedConnector(),
    onSuccess(data) {
      setConnected(true)
    }
  })

  const [connected, setConnected] = useState<boolean>(false);
  const [walletaddress, setWalletaddress] = useState<boolean>(false);
  const [permission, setPermission] = useState<boolean>(false);
  const [profileId, setProfileid] = useState<string>('');

  const hexToDecimal = (hex: string) => (parseInt(hex, 16));
  const handleChange = (event: any) => {
    setProfileid(event.target.value)
    setProfileId(hexToDecimal(event.target.value))
  }

  const checkPermission = (e: any) => {
    e.preventDefault()
    setPermission(true)
  }


  useEffect(() => {
    setSelectedReferenceModule(ReferenceModules.FollowerOnlyReferenceModule);
    if (isConnected) {
      setConnected(true)
    } else {
      setConnected(false)
    }
  });

  return (
    <div >
      <Head>
        <title>Lens Post Delegation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header connectWallet={() => connect()} connected={connected} address={address} />

      <div className='flex items-center justify-center h-screen'>
        {connected ?
          !permission ? <div><form>
            <p className='font-semibold mb-2'>Enter profileId of Lens Profile you wish to post for</p>
            <div className='flex justify-between'>
              <input value={profileId} onChange={handleChange} className="shadow appearance-none border rounded-lg h-12 w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="profileid" type="text" placeholder="profileid">
              </input>
              <Button onClick={e => checkPermission(e)} className='w-48 h-12 ml-4'> Submit </Button>
            </div>
          </form>
            <div>
              <p className={`font-semibold text-red-600 mt-2 ${!permission ? 'opacity-0' : ''}`}>You don’t have permission to post on this account’s behalf.</p>
            </div>
          </div>

            :
            <div className='w-9/12 border rounded-xl'>
              <NewUpdate />
            </div>
          :

          <div className=''>
            <p>Connect wallet to continue.</p>
          </div>

        }
      </div>
    </div>
  )
}
